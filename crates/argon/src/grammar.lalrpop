#![allow(rust_2018_idioms)]
#![cfg_attr(feature = "cargo-clippy", allow(clippy))]

use crate::ast;
use crate::ast::*;
use crate::ir::*;
use crate::ir::pos::SpannedItem;
use crate::MathOperator;
use crate::lexer::Tok;
use nan_preserving_float::F64;
use std::borrow::Cow;

grammar;

Binary<LHS, OP, RHS>: Expression =
    <lhs:LHS> <op:OP> <rhs:RHS> => Expression::binary(op, Box::new(BinaryExpression::new(lhs, rhs)));

pub Module: Module = {
    (<ModifiedFunction*>) => Module::new(<>)
}

ModifiedFunction: Function = {
    "export" <Function> => <>.exported(),
    <Function>
}

Function: Function = {
    "def" <name:"Id"> <args:Parameters> "->" <ty:Type> <body:Block> => Function::new(name, args, ty, body),
    "def" <name:"Id"> <args:Parameters> <body:Block> => Function::new(name, args, Type::void(), body)
}

Parameters: Parameters = {
    "(" <Parameter> <("," <Parameter>)*> ")" => Parameters::from_parser(<>),
    "(" ")" => Parameters::empty()
}

Parameter: Parameter = {
    <"Id"> ":" <Type> => Parameter::new(<>)
}

Type: Spanned<Type> = {
    "i32" => Type::i32().copy_span(&<>),
    "i64" => Type::i64().copy_span(&<>),
    "u32" => Type::u32().copy_span(&<>),
    "u64" => Type::u64().copy_span(&<>),
    "f32" => Type::f32().copy_span(&<>),
    "f64" => Type::f64().copy_span(&<>),
}

Block: Spanned<Block> = {
    <open:"{"> <exprs:(<Expression>)*> <close:"}"> <r: @R> => Block::new(exprs).with_span(open.span().to(close.span()))
}

Expression: Expression = {
    <Expression3>
}

Expression1: Expression = {
    <"Id"> => Expression::VariableAccess(<>),
    <I32>,
    <F64>
}

Expression2: Expression = {
    <Expression1>,
    <Binary<Expression2, "*", Expression1>>,
    <Binary<Expression2, "/", Expression1>>,
}

Expression3: Expression = {
    <Expression2>,
    <Binary<Expression3, "+", Expression2>>,
    <Binary<Expression3, "-", Expression2>>,
}

I32: Expression = <"Int"> => Expression::Const(ast::ConstExpression::Integer(<>.to_spanned_i32()));
F64: Expression = <"Float"> => Expression::Const(ast::ConstExpression::Float(<>.to_spanned_f64()));

extern {
    type Location = usize;
    type Error = ();

    enum Spanned<Tok> {
        "export" => Spanned { node: Tok::Export, .. },
        "def" => Spanned { node: Tok::Def, .. },

        "->" => Spanned { node: Tok::Arrow, .. },
        "(" => Spanned { node: Tok::OpenParen, .. },
        ")" => Spanned { node: Tok::CloseParen, .. },
        "{" => Spanned { node: Tok::OpenBrace, .. },
        "}" => Spanned { node: Tok::CloseBrace, .. },
        ":" => Spanned { node: Tok::Colon, .. },
        "," => Spanned { node: Tok::Comma, .. },

        "i32" => Spanned { node: Tok::I32, .. },
        "i64" => Spanned { node: Tok::I64, .. },
        "u32" => Spanned { node: Tok::U32, .. },
        "u64" => Spanned { node: Tok::U64, .. },
        "f32" => Spanned { node: Tok::F32, .. },
        "f64" => Spanned { node: Tok::F64, .. },

        "*" => Spanned { node: Tok::Mul, .. },
        "/" => Spanned { node: Tok::Div, .. },
        "+" => Spanned { node: Tok::Add, .. },
        "-" => Spanned { node: Tok::Sub, .. },

        "Id" => Spanned { node: Tok::Id(..), .. },
        "Int" => Spanned { node: Tok::Int(..), .. },
        "Float" => Spanned { node: Tok::Float(..), .. },

        "WS" => Spanned { node: Tok::WS, .. },
    }
}